{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { projectStorage } from '../firebase';\n\nconst useStorage = file => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null); // 2nd argument= dependency which is file in this case function inside useEffect will fire every time file changes \n\n  useEffect(() => {\n    //ref to where the file should be saved\n    const storageRef = projectStorage.ref(file.name); //take the file and put it in the ref \n\n    storageRef.put(file).on('state_changed', snap => {\n      //% of upload \n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, async () => {\n      //this will fire when upload is fully complete\n      const url = await storageRef.getDownloadURL;\n      setUrl(url);\n    });\n  }, [file]);\n  return {\n    progress,\n    url,\n    error\n  };\n};\n\nexport default useStorage;","map":{"version":3,"sources":["C:/Users/kkdh1/Desktop/Capstone/client/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","ref","name","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,aAA/B;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACS,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAAC,IAAD,CAA9B,CAH2B,CAK3B;;AACAC,EAAAA,SAAS,CAAC,MAAM;AAEd;AACA,UAAMU,UAAU,GAAGT,cAAc,CAACU,GAAf,CAAmBR,IAAI,CAACS,IAAxB,CAAnB,CAHc,CAKd;;AACAF,IAAAA,UAAU,CAACG,GAAX,CAAeV,IAAf,EAAqBW,EAArB,CAAwB,eAAxB,EAA0CC,IAAD,IAAU;AACjD;AACA,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D;AACAb,MAAAA,WAAW,CAACW,UAAD,CAAX;AACD,KAJD,EAIIG,GAAD,IAAS;AACVZ,MAAAA,QAAQ,CAACY,GAAD,CAAR;AACD,KAND,EAMG,YAAY;AACb;AACA,YAAMX,GAAG,GAAG,MAAME,UAAU,CAACU,cAA7B;AACAX,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAVD;AAWD,GAjBQ,EAiBN,CAACL,IAAD,CAjBM,CAAT;AAmBA,SAAO;AAACC,IAAAA,QAAD;AAAWI,IAAAA,GAAX;AAAgBF,IAAAA;AAAhB,GAAP;AACD,CA1BD;;AA4BA,eAAeJ,UAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { projectStorage } from '../firebase';\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  // 2nd argument= dependency which is file in this case function inside useEffect will fire every time file changes \r\n  useEffect(() => {\r\n\r\n    //ref to where the file should be saved\r\n    const storageRef = projectStorage.ref(file.name);\r\n\r\n    //take the file and put it in the ref \r\n    storageRef.put(file).on('state_changed', (snap) => {\r\n      //% of upload \r\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100; \r\n      setProgress(percentage);\r\n    }, (err) => {\r\n      setError(err);\r\n    }, async () => {\r\n      //this will fire when upload is fully complete\r\n      const url = await storageRef.getDownloadURL;\r\n      setUrl(url);\r\n    })\r\n  }, [file]);\r\n\r\n  return {progress, url, error}\r\n}\r\n\r\nexport default useStorage;"]},"metadata":{},"sourceType":"module"}